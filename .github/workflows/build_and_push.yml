name: Build and Push

on:
  create:
  push:
    branches:
      - 'develop'
      - 'release/**'
    paths-ignore:
      - '**.md'
      - 'changelogs/**'
      - 'docs/**'
      - 'design/**'
      - 'LICENSE'
      - 'MAINTAINERS'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: cachix/install-nix-action@v22
      - uses: rrbutani/use-nix-shell-action@v1.1.0
        with:
          file: shell.nix

      - name: Check if the chart follows a valid semver version
        run: |
          BRANCH=${{ github.ref_name }}
          ./scripts/validate-chart-version.sh --branch $BRANCH

      - name: Run chart-testing lint
        run: |
          ct lint --config ct.yaml

  unit-test:
    runs-on: ubuntu-latest
    needs: ['lint']
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: 1.19.13

      - name: Checkout
        uses: actions/checkout@v4

      - name: Unit test
        run: make test

      - name: Verify corrections
        run: make verify-src

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          name: coverage-$(date +%s)
          flags: unittests

  integration-test:
    runs-on: ubuntu-latest
    needs: ['lint', 'unit-test']
    strategy:
      matrix:
        kubernetes: [v1.27.2]
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: 1.19.13

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build images locally
        run: make provisioner-localpv-image || exit 1;

      - name: Setup Minikube-Kubernetes
        uses: medyagh/setup-minikube@latest
        with:
          cache: false
          minikube-version: 1.31.1
          driver: none
          kubernetes-version: ${{ matrix.kubernetes }}
          cni: calico
          start-args: '--install-addons=false'

      - name: Set up infra for integration test
        run: |
          sudo apt-get update && sudo apt-get install -y xfsprogs quota linux-modules-extra-`uname -r`
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo@v2.14.0
          helm install localpv-provisioner ./deploy/helm/charts -n openebs --create-namespace --set localpv.image.pullPolicy=Never --set analytics.enabled=false
          kubectl get pods -A

      - name: Integration test
        run: |
          make integration-test

      - name: Upload Integration Test Coverage Report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./tests/integration_coverage.txt
          name: coverage-integration-test-$(date +%s)
          flags: integrationtests

  provisioner-localpv:
    runs-on: ubuntu-latest
    needs: ['integration-test']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: 1.19.13
          
      - name: Set Image Org
        # sets the default IMAGE_ORG to openebs
        run: |
          [ -z "${{ secrets.IMAGE_ORG }}" ] && IMAGE_ORG=openebs || IMAGE_ORG=${{ secrets.IMAGE_ORG}}
          echo "IMAGE_ORG=${IMAGE_ORG}" >> $GITHUB_ENV

      - name: Set CI Tag
        run: |
          BRANCH=${{ github.ref_name }}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          CI_TAG=$(awk -F': ' '/^version:/ {print $2}' deploy/helm/charts/Chart.yaml)
          echo "TAG=${CI_TAG}" >> $GITHUB_ENV

      - name: Set Build Date
        id: date
        run: |
          echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%S%Z')" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          # add each registry to which the image needs to be pushed here
          images: |
            ${{ env.IMAGE_ORG }}/provisioner-localpv
            quay.io/${{ env.IMAGE_ORG }}/provisioner-localpv
            ghcr.io/${{ env.IMAGE_ORG }}/provisioner-localpv
          tags: |
            type=raw,value=latest,enable=false
            type=raw,value=${{ env.TAG }}

      - name: Print Tag info
        run: |
          echo "BRANCH: ${{ env.BRANCH }}"
          echo "${{ steps.docker_meta.outputs.tags }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.5.1

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and Push multi-arch Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./buildscripts/provisioner-localpv/provisioner-localpv.Dockerfile
          push: true
          load: false
          platforms: linux/amd64, linux/arm64, linux/arm/v7, linux/ppc64le
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          build-args: |
            DBUILD_DATE=${{ steps.date.outputs.DATE }}
            DBUILD_REPO_URL=https://github.com/openebs/dynamic-localpv-provisioner
            DBUILD_SITE_URL=https://openebs.io
            BRANCH=${{ env.BRANCH }}

  release-chart:
    runs-on: ubuntu-latest
    needs: ['provisioner-localpv']
    steps:
      - uses: actions/checkout@v4
      - name: Publish provisioner-localpv develop or prerelease helm chart
        uses: stefanprodan/helm-gh-pages@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          charts_dir: ./deploy/helm
